Line:1 Token: COMMENT Lexeme: // int x,y,z; float a;

Line:3 Token: COMMENT Lexeme: // void foo();

Line:5 Token: COMMENT Lexeme: // int var(int a, int b){

Line:6 Token: COMMENT Lexeme: // 	return a+b;

Line:7 Token: COMMENT Lexeme: // }

Line:9 Token: COMMENT Lexeme: // int fib(int n) 

Line:10 Token: COMMENT Lexeme: // { 

Line:11 Token: COMMENT Lexeme: //   int a, b, c, i;

Line:12 Token: COMMENT Lexeme: //   a=0;

Line:13 Token: COMMENT Lexeme: //   b=1; 

Line:14 Token: COMMENT Lexeme: //   if( n == 0) 

Line:15 Token: COMMENT Lexeme: //     return a; 

Line:16 Token: COMMENT Lexeme: //   for (i = 2; i <= n; i++) 

Line:17 Token: COMMENT Lexeme: //   { 

Line:18 Token: COMMENT Lexeme: //      c = a + b; 

Line:19 Token: COMMENT Lexeme: //      a = b; 

Line:20 Token: COMMENT Lexeme: //      b = c; 

Line:21 Token: COMMENT Lexeme: //   } 

Line:22 Token: COMMENT Lexeme: //   return b; 

Line:23 Token: COMMENT Lexeme: // } 

Line:25 Token: ID Lexeme: main

Line:25 Token: LPAREN Lexeme: (

Line:25 Token: RPAREN Lexeme: )

Line:25 Token: LCURL Lexeme: {

Line:28 Token: ID Lexeme: x

Line:28 Token: SEMICOLON Lexeme: ;

Line:29 Token: ID Lexeme: x

Line:29 Token: INCOP Lexeme: ++

Line:29 Token: SEMICOLON Lexeme: ;

Line:30 Token: COMMENT Lexeme: //int a[2],c,i,j ; float d;

Line:31 Token: COMMENT Lexeme: // a[0]=1;

Line:32 Token: COMMENT Lexeme: // a[1]=5;

Line:33 Token: COMMENT Lexeme: // i= a[0]+a[1];

Line:34 Token: COMMENT Lexeme: // j= 2*3+(5%3 < 4 && 8) || 2 ;

Line:35 Token: COMMENT Lexeme: // d=var(1,2*3)+3.5*2;

Line:36 Token: CONST_INT Lexeme: 0

Line:36 Token: SEMICOLON Lexeme: ;

Line:37 Token: RCURL Lexeme: }

