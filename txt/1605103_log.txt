Line:1  type_specifier -> INT
int 
Line:1  type_specifier -> INT
int 
Line:1  parameter_list -> type_specifier ID
int  a

  SCOPE TABLE #1
  75:<func,ID> - 



  SCOPE TABLE #2
  14:<a,ID> - 


Line:2  variable->ID
a
Line:2  factor->variable
a
Line:2  unary_expression->factor
a
Line:2  term->unary_expression
a
Line:2  simple_expression->term
a
Line:2  rel_expression->simple_expression
a
Line:2  logic_expression->rel_expression
a
Line:2  expression->logic_expression
a
Line:2  statement->RETURN expression SEMICOLON
return a
Line:2  statements -> statement
return a;
Line:3  compound_statement -> LCURL statements RCURL
{$<symbolinfo>3->getName()}

  SCOPE TABLE #2
  14:<a,ID> - 



  SCOPE TABLE #1
  75:<func,ID> - 



  SCOPE TABLE #0


func_definition->type_specifier ID LPAREN parameter_list RPAREN compound_statement 
int  func(int  a){
return a;
}
Line:3  unit->func_definition
int  func(int  a){
return a;
}
Line:3  program->unit
int  func(int  a){
return a;
}

Line:5  type_specifier -> INT
int 

  SCOPE TABLE #1
  48:<main,ID> - 
  75:<func,ID> - 


Line:6  type_specifier -> INT
int 
Line:6  declaration_list -> ID
a
 Symbol symbolTable : 

  SCOPE TABLE #2



  SCOPE TABLE #1
  48:<main,ID> - 
  75:<func,ID> - 



  SCOPE TABLE #0


Lines :
Total Errors :
Line:1  type_specifier -> INT
int 
Line:1  type_specifier -> INT
int 
Line:1  parameter_list -> type_specifier ID
int  a

  SCOPE TABLE #0
  75:<func,ID> - 



  SCOPE TABLE #1
  14:<a,ID> - 


Line:2  variable->ID
a
Line:2  factor->variable
a
Line:2  unary_expression->factor
a
Line:2  term->unary_expression
a
Line:2  simple_expression->term
a
Line:2  rel_expression->simple_expression
a
Line:2  logic_expression->rel_expression
a
Line:2  expression->logic_expression
a
Line:2  statement->RETURN expression SEMICOLON
return a
Line:2  statements -> statement
return a;
Line:3  compound_statement -> LCURL statements RCURL
{$<symbolinfo>3->getName()}

  SCOPE TABLE #1
  14:<a,ID> - 



  SCOPE TABLE #0
  75:<func,ID> - 


func_definition->type_specifier ID LPAREN parameter_list RPAREN compound_statement 
int  func(int  a){
return a;
}
Line:3  unit->func_definition
int  func(int  a){
return a;
}
Line:3  program->unit
int  func(int  a){
return a;
}

Line:5  type_specifier -> INT
int 

  SCOPE TABLE #0
  48:<main,ID> - 
  75:<func,ID> - 


Line:6  type_specifier -> INT
int 
Line:6  declaration_list -> ID
a
 Symbol symbolTable : 

  SCOPE TABLE #1



  SCOPE TABLE #0
  48:<main,ID> - 
  75:<func,ID> - 


Lines :
Total Errors :
Line:1  type_specifier -> INT
int 
Line:1  type_specifier -> INT
int 
Line:1  parameter_list -> type_specifier ID
int  a

  SCOPE TABLE #0
  75:<func,ID> - 



  SCOPE TABLE #1
  14:<a,ID> - 


Line:2  variable->ID
a
Line:2  factor->variable
a
Line:2  unary_expression->factor
a
Line:2  term->unary_expression
a
Line:2  simple_expression->term
a
Line:2  rel_expression->simple_expression
a
Line:2  logic_expression->rel_expression
a
Line:2  expression->logic_expression
a
Line:2  statement->RETURN expression SEMICOLON
return a
Line:2  statements -> statement
return a;
Line:3  compound_statement -> LCURL statements RCURL
{$<symbolinfo>3->getName()}

  SCOPE TABLE #1
  14:<a,ID> - 



  SCOPE TABLE #0
  75:<func,ID> - 


func_definition->type_specifier ID LPAREN parameter_list RPAREN compound_statement 
int  func(int  a){
return a;
}
Line:3  unit->func_definition
int  func(int  a){
return a;
}
Line:3  program->unit
int  func(int  a){
return a;
}

Line:5  type_specifier -> INT
int 

  SCOPE TABLE #0
  48:<main,ID> - 
  75:<func,ID> - 


Line:6  type_specifier -> INT
int 
Line:6  declaration_list -> ID
a
 Symbol symbolTable : 

  SCOPE TABLE #1



  SCOPE TABLE #0
  48:<main,ID> - 
  75:<func,ID> - 


Lines :
Total Errors :
Line:1  type_specifier -> INT
int 
Line:1  declaration_list -> ID
x
Line:1  declaration_list -> declaration_list COMMA ID
x,y
Line:1  declaration_list -> declaration_list COMMA ID
x,y,z
Line:1  var_declaration -> type_specifier declaration_list SEMICOLON
int  x,y,z;

  SCOPE TABLE #0
  37:<x,ID> - 



  SCOPE TABLE #0
  37:<x,ID> - 
  38:<y,ID> - 



  SCOPE TABLE #0
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 


Line:1  unit->var_declaration
int  x,y,z;
Line:1  program->unit
int  x,y,z;

Line:1  type_specifier -> FLOAT
float 
Line:1  declaration_list -> ID
a
Line:1  var_declaration -> type_specifier declaration_list SEMICOLON
float  a;

  SCOPE TABLE #0
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 


Line:1  unit->var_declaration
float  a;
Line:1  program->program unit
int  x,y,z;
 float  a;

Line:3  type_specifier -> VOID
void 
Line:3  func_declaration->type_specifier ID LPAREN RPAREN SEMICOLON
void  foo();

  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 


Line:3  unit->func_declaration
void  foo();
Line:3  program->program unit
int  x,y,z;
float  a;
 void  foo();

Line:5  type_specifier -> INT
int 
Line:5  type_specifier -> INT
int 
Line:5  parameter_list -> type_specifier ID
int  a
Line:5  type_specifier -> INT
int 
Line:5  parameter_list -> parameter_list COMMA type_specifier ID
int  a,int  b

  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  56:<var,ID> - 



  SCOPE TABLE #1
  14:<a,ID> - 



  SCOPE TABLE #1
  14:<a,ID> - 
  15:<b,ID> - 


Line:6  variable->ID
a
Line:6  factor->variable
a
Line:6  unary_expression->factor
a
Line:6  term->unary_expression
a
Line:6  simple_expression->term
a
Line:6  variable->ID
b
Line:6  factor->variable
b
Line:6  unary_expression->factor
b
Line:6  term->unary_expression
b
Line:6  simple_expression->simple_expression ADDOP term
a+b
Line:6  rel_expression->simple_expression
a+b
Line:6  logic_expression->rel_expression
a+b
Line:6  expression->logic_expression
a+b
Line:6  statement->RETURN expression SEMICOLON
return a+b
Line:6  statements -> statement
return a+b;
Line:7  compound_statement -> LCURL statements RCURL
{$<symbolinfo>3->getName()}

  SCOPE TABLE #1
  14:<a,ID> - 
  15:<b,ID> - 



  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  56:<var,ID> - 


func_definition->type_specifier ID LPAREN parameter_list RPAREN compound_statement 
int  var(int  a,int  b){
return a+b;
}
Line:7  unit->func_definition
int  var(int  a,int  b){
return a+b;
}
Line:7  program->program unit
int  x,y,z;
float  a;
void  foo();
 int  var(int  a,int  b){
return a+b;
}

Line:9  type_specifier -> VOID
void 
Line:10  variable->ID
x
Line:10  factor->CONST_INT
2
Line:10  unary_expression->factor
2
Line:10  term->unary_expression
2
Line:10  simple_expression->term
2
Line:10  rel_expression->simple_expression
2
Line:10  logic_expression->rel_expression
2
Line:10  expression->variable ASSIGNOP logic_expression
x=2
Line:10  expression_statement->expression SEMICOLON
Line:10  statement -> expression_statement
x=2;
Line:10  statements -> statement
x=2;
Line:11  variable->ID
y
Line:11  variable->ID
x
Line:11  factor->variable
x
Line:11  unary_expression->factor
x
Line:11  term->unary_expression
x
Line:11  simple_expression->term
x
Line:11  factor->CONST_INT
5
Line:11  unary_expression->factor
5
Line:11  term->unary_expression
5
Line:11  simple_expression->simple_expression ADDOP term
x-5
Line:11  rel_expression->simple_expression
x-5
Line:11  logic_expression->rel_expression
x-5
Line:11  expression->variable ASSIGNOP logic_expression
y=x-5
Line:11  expression_statement->expression SEMICOLON
Line:11  statement -> expression_statement
y=x-5;
Line:11  statements -> statements statement
x=2; y=x-5;
Line:12  compound_statement -> LCURL statements RCURL
{$<symbolinfo>3->getName()}

  SCOPE TABLE #1



  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  56:<var,ID> - 


func_definition->type_specifier ID LPAREN RPAREN compound_statement
void  foo() {
x=2;
y=x-5;
}
Line:12  unit->func_definition
void  foo(){
x=2;
y=x-5;
}
Line:12  program->program unit
int  x,y,z;
float  a;
void  foo();
int  var(int  a,int  b){
return a+b;
}
 void  foo(){
x=2;
y=x-5;
}

Line:14  type_specifier -> INT
int 

  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  48:<main,ID> - 
  56:<var,ID> - 


Line:15  type_specifier -> INT
int 
Line:15  declaration_list -> ID
a
 Symbol symbolTable : 

  SCOPE TABLE #1



  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  48:<main,ID> - 
  56:<var,ID> - 


otal Errors :
tal Errors :
Line:1  type_specifier -> INT
int 
Line:1  declaration_list -> ID
x
Line:1  declaration_list -> declaration_list COMMA ID
x,y
Line:1  declaration_list -> declaration_list COMMA ID
x,y,z
Line:1  var_declaration -> type_specifier declaration_list SEMICOLON
int  x,y,z;

  SCOPE TABLE #0
  37:<x,ID> - 



  SCOPE TABLE #0
  37:<x,ID> - 
  38:<y,ID> - 



  SCOPE TABLE #0
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 


Line:1  unit->var_declaration
int  x,y,z;
Line:1  program->unit
int  x,y,z;

Line:1  type_specifier -> FLOAT
float 
Line:1  declaration_list -> ID
a
Line:1  var_declaration -> type_specifier declaration_list SEMICOLON
float  a;

  SCOPE TABLE #0
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 


Line:1  unit->var_declaration
float  a;
Line:1  program->program unit
int  x,y,z;
 float  a;

Line:3  type_specifier -> VOID
void 
Line:3  func_declaration->type_specifier ID LPAREN RPAREN SEMICOLON
void  foo();

  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 


Line:3  unit->func_declaration
void  foo();
Line:3  program->program unit
int  x,y,z;
float  a;
 void  foo();

Line:5  type_specifier -> INT
int 
Line:5  type_specifier -> INT
int 
Line:5  parameter_list -> type_specifier ID
int  a
Line:5  type_specifier -> INT
int 
Line:5  parameter_list -> parameter_list COMMA type_specifier ID
int  a,int  b

  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  56:<var,ID> - 



  SCOPE TABLE #1
  14:<a,ID> - 



  SCOPE TABLE #1
  14:<a,ID> - 
  15:<b,ID> - 


Line:6  variable->ID
a
Line:6  factor->variable
a
Line:6  unary_expression->factor
a
Line:6  term->unary_expression
a
Line:6  simple_expression->term
a
Line:6  variable->ID
b
Line:6  factor->variable
b
Line:6  unary_expression->factor
b
Line:6  term->unary_expression
b
Line:6  simple_expression->simple_expression ADDOP term
a+b
Line:6  rel_expression->simple_expression
a+b
Line:6  logic_expression->rel_expression
a+b
Line:6  expression->logic_expression
a+b
Line:6  statement->RETURN expression SEMICOLON
return a+b
Line:6  statements -> statement
return a+b;
Line:7  compound_statement -> LCURL statements RCURL
{$<symbolinfo>3->getName()}

  SCOPE TABLE #1
  14:<a,ID> - 
  15:<b,ID> - 



  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  56:<var,ID> - 


func_definition->type_specifier ID LPAREN parameter_list RPAREN compound_statement 
int  var(int  a,int  b){
return a+b;
}
Line:7  unit->func_definition
int  var(int  a,int  b){
return a+b;
}
Line:7  program->program unit
int  x,y,z;
float  a;
void  foo();
 int  var(int  a,int  b){
return a+b;
}

Line:9  type_specifier -> VOID
void 
Line:10  variable->ID
x
Line:10  factor->CONST_INT
2
Line:10  unary_expression->factor
2
Line:10  term->unary_expression
2
Line:10  simple_expression->term
2
Line:10  rel_expression->simple_expression
2
Line:10  logic_expression->rel_expression
2
Line:10  expression->variable ASSIGNOP logic_expression
x=2
Line:10  expression_statement->expression SEMICOLON
Line:10  statement -> expression_statement
x=2;
Line:10  statements -> statement
x=2;
Line:11  variable->ID
y
Line:11  variable->ID
x
Line:11  factor->variable
x
Line:11  unary_expression->factor
x
Line:11  term->unary_expression
x
Line:11  simple_expression->term
x
Line:11  factor->CONST_INT
5
Line:11  unary_expression->factor
5
Line:11  term->unary_expression
5
Line:11  simple_expression->simple_expression ADDOP term
x-5
Line:11  rel_expression->simple_expression
x-5
Line:11  logic_expression->rel_expression
x-5
Line:11  expression->variable ASSIGNOP logic_expression
y=x-5
Line:11  expression_statement->expression SEMICOLON
Line:11  statement -> expression_statement
y=x-5;
Line:11  statements -> statements statement
x=2; y=x-5;
Line:12  compound_statement -> LCURL statements RCURL
{$<symbolinfo>3->getName()}

  SCOPE TABLE #1



  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  56:<var,ID> - 


func_definition->type_specifier ID LPAREN RPAREN compound_statement
void  foo() {
x=2;
y=x-5;
}
Line:12  unit->func_definition
void  foo(){
x=2;
y=x-5;
}
Line:12  program->program unit
int  x,y,z;
float  a;
void  foo();
int  var(int  a,int  b){
return a+b;
}
 void  foo(){
x=2;
y=x-5;
}

Line:14  type_specifier -> INT
int 

  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  48:<main,ID> - 
  56:<var,ID> - 


Line:15  type_specifier -> INT
int 
Line:15  declaration_list -> ID
a
 Symbol symbolTable : 

  SCOPE TABLE #1



  SCOPE TABLE #0
  11:<foo,ID> - 
  14:<a,ID> - 
  37:<x,ID> - 
  38:<y,ID> - 
  39:<z,ID> - 
  48:<main,ID> - 
  56:<var,ID> - 


otal Errors :
tal Errors :
