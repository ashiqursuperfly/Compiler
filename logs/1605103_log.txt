Line:1  type_specifier -> INT
int 
Line:1  type_specifier -> INT
int 
Line:1  parameter_list -> type_specifier ID
int  a
Line:2  variable->ID
a
Line:2  factor->variable
a
Line:2  unary_expression->factor
a
Line:2  term->unary_expression
a
Line:2  simple_expression -> term
a
Line:2  rel_expression->simple_expression
a
Line:2  logic_expression->rel_expression
a
Line:2  expression->logic_expression
a
Line:2  statement->RETURN expression SEMICOLON
return a
Line:2  statements -> statement
return a;
Line:3  compound_statement -> LCURL statements RCURL
{return a;}

  SCOPE TABLE #1
  14:<ID,int ,a> - 



  SCOPE TABLE #0
  75:<ID,Function,func> - 


Line:3  func_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement 
int  func(int  a) {
return a;
}
Line:3  unit->func_definition
int  func(int  a){
return a;
}
Line:3  program->unit
int  func(int  a){
return a;
}


Line:5  type_specifier -> INT
int 
Line:6  type_specifier -> INT
int 
Line:6  declaration_list -> ID LTHIRD CONST_INT RTHIRD
a[2]
Line:6  declaration_list -> declaration_list COMMA ID
a[2],c
Line:6  declaration_list -> declaration_list COMMA ID
a[2],c,i
Line:6  declaration_list -> declaration_list COMMA ID
a[2],c,i,j
Line:6  var_declaration -> type_specifier declaration_list SEMICOLON
int  a[2],c,i,j;
Line:6  statement -> var_declaration
int  a[2],c,i,j;
Line:6  statements -> statement
int  a[2],c,i,j;
Line:6  type_specifier -> FLOAT
float 
Line:6  declaration_list -> ID
c
Line:6  var_declaration -> type_specifier declaration_list SEMICOLON
float  c;
Line:6  statement -> var_declaration
float  c;
Line:6  statements -> statements statement
int  a[2],c,i,j; float  c;
Line:7  factor->CONST_FLOAT
2.5
Line:7  unary_expression->factor
2.5
Line:7  term->unary_expression
2.5
Line:7  simple_expression -> term
2.5
Line:7  rel_expression->simple_expression
2.5
Line:7  logic_expression->rel_expression
2.5
Line:7  expression->logic_expression
2.5
Line:7  variable->ID LTHIRD expression RTHIRD
a[2.5]
Line:7  factor -> CONST_INT
1
Line:7  unary_expression->factor
1
Line:7  term->unary_expression
1
Line:7  simple_expression -> term
1
Line:7  rel_expression->simple_expression
1
Line:7  logic_expression->rel_expression
1
Line:7  expression->variable ASSIGNOP logic_expression
a[2.5]=1
Line:7  expression_statement->expression SEMICOLON
a[2.5]=1;
Line:7  statement -> expression_statement
a[2.5]=1;
Line:7  statements -> statements statement
int  a[2],c,i,j;
float  c; a[2.5]=1;
Line:8  variable->ID
i
Line:8  factor->CONST_FLOAT
2.3
Line:8  unary_expression->factor
2.3
Line:8  term->unary_expression
2.3
Line:8  simple_expression -> term
2.3
Line:8  rel_expression->simple_expression
2.3
Line:8  logic_expression->rel_expression
2.3
Line:8  expression->variable ASSIGNOP logic_expression
i=2.3
Line:8  Type Mismatch 6
Line:8  expression_statement->expression SEMICOLON
i=2.3;
Line:8  statement -> expression_statement
i=2.3;
Line:8  statements -> statements statement
int  a[2],c,i,j;
float  c;
a[2.5]=1; i=2.3;
Line:9  variable->ID
j
Line:9  factor -> CONST_INT
2
Line:9  unary_expression->factor
2
Line:9  term->unary_expression
2
Line:9  factor->CONST_FLOAT
3.7
Line:9  unary_expression->factor
3.7
Line:9  term->term MULOP unary_expression
2%3.7
Line:9  simple_expression -> term
2%3.7
Line:9  rel_expression->simple_expression
2%3.7
Line:9  logic_expression->rel_expression
2%3.7
Line:9  expression->variable ASSIGNOP logic_expression
j=2%3.7
Line:9  expression_statement->expression SEMICOLON
j=2%3.7;
Line:9  statement -> expression_statement
j=2%3.7;
Line:9  statements -> statements statement
int  a[2],c,i,j;
float  c;
a[2.5]=1;
i=2.3; j=2%3.7;
Line:10  variable->ID
a
Line:10  factor -> CONST_INT
4
Line:10  unary_expression->factor
4
Line:10  term->unary_expression
4
Line:10  simple_expression -> term
4
Line:10  rel_expression->simple_expression
4
Line:10  logic_expression->rel_expression
4
Line:10  expression->variable ASSIGNOP logic_expression
a=4
Line:10  Type Mismatch 6
Line:10  expression_statement->expression SEMICOLON
a=4;
Line:10  statement -> expression_statement
a=4;
Line:10  statements -> statements statement
int  a[2],c,i,j;
float  c;
a[2.5]=1;
i=2.3;
j=2%3.7; a=4;
Line:11  variable->ID
a
Line:11  factor->variable
a
Line:11  unary_expression->factor
a
Line:11  term->unary_expression
a
Line:11  simple_expression -> term
a
Line:11  rel_expression->simple_expression
a
Line:11  logic_expression->rel_expression
a
Line:11  arguments->logic_expression
a
Line:11  argument_list->arguments
a
Line:11  factor->ID LPAREN argument_list RPAREN
func(a)
Line:11  unary_expression->factor
func(a)
Line:11  term->unary_expression
func(a)
Line:11  simple_expression -> term
func(a)
Line:11  rel_expression->simple_expression
func(a)
Line:11  logic_expression->rel_expression
func(a)
Line:11  expression->logic_expression
func(a)
Line:11  expression_statement->expression SEMICOLON
func(a);
Line:11  statement -> expression_statement
func(a);
Line:11  statements -> statements statement
int  a[2],c,i,j;
float  c;
a[2.5]=1;
i=2.3;
j=2%3.7;
a=4; func(a);
Line:12  variable->ID
b
Line:12  factor -> CONST_INT
8
Line:12  unary_expression->factor
8
Line:12  term->unary_expression
8
Line:12  simple_expression -> term
8
Line:12  rel_expression->simple_expression
8
Line:12  logic_expression->rel_expression
8
Line:12  expression->variable ASSIGNOP logic_expression
b=8
Line:12  expression_statement->expression SEMICOLON
b=8;
Line:12  statement -> expression_statement
b=8;
Line:12  statements -> statements statement
int  a[2],c,i,j;
float  c;
a[2.5]=1;
i=2.3;
j=2%3.7;
a=4;
func(a); b=8;
Line:13  factor -> CONST_INT
0
Line:13  unary_expression->factor
0
Line:13  term->unary_expression
0
Line:13  simple_expression -> term
0
Line:13  rel_expression->simple_expression
0
Line:13  logic_expression->rel_expression
0
Line:13  expression->logic_expression
0
Line:13  statement->RETURN expression SEMICOLON
return 0
Line:13  statements -> statements statement
int  a[2],c,i,j;
float  c;
a[2.5]=1;
i=2.3;
j=2%3.7;
a=4;
func(a);
b=8; return 0;
Line:14  compound_statement -> LCURL statements RCURL
{int  a[2],c,i,j;
float  c;
a[2.5]=1;
i=2.3;
j=2%3.7;
a=4;
func(a);
b=8;
return 0;}

  SCOPE TABLE #1
  14:<ID,int array,a> - 
  16:<ID,int ,c> - 
  22:<ID,int ,i> - 
  23:<ID,int ,j> - 



  SCOPE TABLE #0
  48:<ID,Function,main> - 
  75:<ID,Function,func> - 


Line:14  func_definition->type_specifier ID LPAREN RPAREN compound_statement
int  main() {
int  a[2],c,i,j;
float  c;
a[2.5]=1;
i=2.3;
j=2%3.7;
a=4;
func(a);
b=8;
return 0;
}
Line:14  unit->func_definition
int  main(){
int  a[2],c,i,j;
float  c;
a[2.5]=1;
i=2.3;
j=2%3.7;
a=4;
func(a);
b=8;
return 0;
}
Line:14  program->program unit
int  func(int  a){
return a;
}
 int  main(){
int  a[2],c,i,j;
float  c;
a[2.5]=1;
i=2.3;
j=2%3.7;
a=4;
func(a);
b=8;
return 0;
}

Final SymbolTable : 

  SCOPE TABLE #0
  48:<ID,Function,main> - 
  75:<ID,Function,func> - 


Total Lines :15
Total Errors :9
