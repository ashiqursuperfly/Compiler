

^^^^^^^^^^^Parsing Test/input0.c^^^^^^^^^^^



Line:1  type_specifier : INT

int 

Line:1  type_specifier : INT

int 

Line:1  parameter_list : type_specifier-ID

int  a

Line:2  variable : ID

a

Line:2  factor : variable

a

Line:2  unary_expression : factor

a

Line:2  term : unary_expression

a

Line:2  simple_expression : term

a

Line:2  rel_expression : simple_expression

a

Line:2  logic_expression : rel_expression

a

Line:2  expression : logic_expression

a

Line:2  statement : RETURN-expression-SEMICOLON

return a

Line:2  statements : statement

return a;

Line:3  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #1

  14:<ID,int ,a> - 





  SCOPE TABLE #0

  75:<ID,Function,func> - 




{return a;}

Line:3  func_definition : type_specifier-ID-LPAREN-parameter_list-RPAREN-compound_statement 

int  func(int  a) {
return a;
}

Line:3  unit : func_definition

int  func(int  a){
return a;
}

Line:3  program : unit

int  func(int  a){
return a;
}



Line:5  type_specifier : FLOAT

float 

Line:6  factor : CONST_FLOAT

1.0

Line:6  unary_expression : factor

1.0

Line:6  term : unary_expression

1.0

Line:6  simple_expression : term

1.0

Line:6  rel_expression : simple_expression

1.0

Line:6  logic_expression : rel_expression

1.0

Line:6  expression : logic_expression

1.0

Line:6  statement : RETURN-expression-SEMICOLON

return 1.0

Line:6  statements : statement

return 1.0;

Line:7  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #1





  SCOPE TABLE #0

  19:<ID,Function,f> - 

  75:<ID,Function,func> - 




{return 1.0;}

Line:7  func_definition : type_specifier-ID-LPAREN-RPAREN-compound_statement

float  f(){
return 1.0;
} {
return 1.0;
}

Line:7  unit : func_definition

float  f(){
return 1.0;
}

Line:7  program : program-unit

int  func(int  a){
return a;
}
 float  f(){
return 1.0;
}


Line:9  type_specifier : VOID

void 

Line:11  compound_statement : LCURL-RCURL

{}


  SCOPE TABLE #1





  SCOPE TABLE #0

  19:<ID,Function,f> - 

  20:<ID,Function,g> - 

  75:<ID,Function,func> - 




Line:11  func_definition : type_specifier-ID-LPAREN-RPAREN-compound_statement

void  g(){} {}

Line:11  unit : func_definition

void  g(){}

Line:11  program : program-unit

int  func(int  a){
return a;
}
float  f(){
return 1.0;
}
 void  g(){}


Line:13  type_specifier : INT

int 

Line:13  type_specifier : INT

int 

Line:13  parameter_list : type_specifier-ID

int  a

Line:13  func_declaration : type_specifier-ID-LPAREN-parameter_list-RPAREN-SEMICOLON

int  h(int  a)

Line:13  unit : func_declaration

int  h(int  a);

Line:13  program : program-unit

int  func(int  a){
return a;
}
float  f(){
return 1.0;
}
void  g(){}
 int  h(int  a);


Line:15  type_specifier : INT

int 

Line:16  type_specifier : INT

int 

Line:16  declarationList : ID-LTHIRD-CONST_INT-RTHIRD

a[2]

Line:16  declarationList : declarationList-COMMA-ID

a[2],c

Line:16  declarationList : declarationList-COMMA-ID

a[2],c,i

Line:16  declarationList : declarationList-COMMA-ID

a[2],c,i,j

Line:16  var_declaration : type_specifier-declarationList-SEMICOLON

int  a[2],c,i,j;

Line:16  statement : var_declaration

int  a[2],c,i,j;

Line:16  statements : statement

int  a[2],c,i,j;

Line:17  type_specifier : FLOAT

float 

Line:17  declarationList : ID

c

Line:17  var_declaration : type_specifier-declarationList-SEMICOLON

float  c;

Line:17  statement : var_declaration

float  c;

Line:17  statements : statements-statement

int  a[2],c,i,j; float  c;

Line:18  variable : ID

i

Line:18  factor : CONST_FLOAT

2.3

Line:18  unary_expression : factor

2.3

Line:18  term : unary_expression

2.3

Line:18  simple_expression : term

2.3

Line:18  rel_expression : simple_expression

2.3

Line:18  logic_expression : rel_expression

2.3

Line:18  expression : variable-ASSIGNOP-logic_expression

i=2.3

Line:18  expression_statement : expression-SEMICOLON

i=2.3;

Line:18  statement : expression_statement

i=2.3;

Line:18  statements : statements-statement

int  a[2],c,i,j;
float  c; i=2.3;

Line:19  factor : CONST_FLOAT

2.5

Line:19  unary_expression : factor

2.5

Line:19  term : unary_expression

2.5

Line:19  simple_expression : term

2.5

Line:19  rel_expression : simple_expression

2.5

Line:19  logic_expression : rel_expression

2.5

Line:19  expression : logic_expression

2.5

Line:19  variable : ID-LTHIRD-expression-RTHIRD

a[2.5]

Line:19  factor : CONST_INT

1

Line:19  unary_expression : factor

1

Line:19  term : unary_expression

1

Line:19  simple_expression : term

1

Line:19  rel_expression : simple_expression

1

Line:19  logic_expression : rel_expression

1

Line:19  expression : variable-ASSIGNOP-logic_expression

a[2.5]=1

Line:19  expression_statement : expression-SEMICOLON

a[2.5]=1;

Line:19  statement : expression_statement

a[2.5]=1;

Line:19  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3; a[2.5]=1;

Line:20  variable : ID

j

Line:20  factor : CONST_INT

2

Line:20  unary_expression : factor

2

Line:20  term : unary_expression

2

Line:20  factor : CONST_FLOAT

3.7

Line:20  unary_expression : factor

3.7

Line:20  term : term-MULOP-unary_expression

2%3.7

Line:20  simple_expression : term

2%3.7

Line:20  rel_expression : simple_expression

2%3.7

Line:20  logic_expression : rel_expression

2%3.7

Line:20  expression : variable-ASSIGNOP-logic_expression

j=2%3.7

Line:20  expression_statement : expression-SEMICOLON

j=2%3.7;

Line:20  statement : expression_statement

j=2%3.7;

Line:20  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1; j=2%3.7;

Line:21  variable : ID

j

Line:21  factor : CONST_INT

2

Line:21  unary_expression : factor

2

Line:21  term : unary_expression

2

Line:21  argument_list : %empty

Line:21  

Line:21  factor : ID-LPAREN-argument_list-RPAREN

f()

Line:21  unary_expression : factor

f()

Line:21  term : term-MULOP-unary_expression

2%f()

Line:21  simple_expression : term

2%f()

Line:21  rel_expression : simple_expression

2%f()

Line:21  logic_expression : rel_expression

2%f()

Line:21  expression : variable-ASSIGNOP-logic_expression

j=2%f()

Line:21  expression_statement : expression-SEMICOLON

j=2%f();

Line:21  statement : expression_statement

j=2%f();

Line:21  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7; j=2%f();

Line:22  variable : ID

a

Line:22  factor : variable

a

Line:22  unary_expression : factor

a

Line:22  term : unary_expression

a

Line:22  simple_expression : term

a

Line:22  rel_expression : simple_expression

a

Line:22  logic_expression : rel_expression

a

Line:22  arguments : logic_expression

a

Line:22  argument_list : arguments

a

Line:22  factor : ID-LPAREN-argument_list-RPAREN

func(a)

Line:22  unary_expression : factor

func(a)

Line:22  term : unary_expression

func(a)

Line:22  simple_expression : term

func(a)

Line:22  rel_expression : simple_expression

func(a)

Line:22  logic_expression : rel_expression

func(a)

Line:22  expression : logic_expression

func(a)

Line:22  expression_statement : expression-SEMICOLON

func(a);

Line:22  statement : expression_statement

func(a);

Line:22  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f(); func(a);

Line:23  variable : ID

j

Line:23  argument_list : %empty

Line:23  

Line:23  factor : ID-LPAREN-argument_list-RPAREN

g()

Line:23  unary_expression : factor

g()

Line:23  term : unary_expression

g()

Line:23  simple_expression : term

g()

Line:23  rel_expression : simple_expression

g()

Line:23  logic_expression : rel_expression

g()

Line:23  expression : variable-ASSIGNOP-logic_expression

j=g()

Line:23  expression_statement : expression-SEMICOLON

j=g();

Line:23  statement : expression_statement

j=g();

Line:23  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a); j=g();

Line:24  variable : ID

j

Line:24  factor : CONST_INT

2

Line:24  unary_expression : factor

2

Line:24  term : unary_expression

2

Line:24  factor : CONST_FLOAT

3.5

Line:24  unary_expression : factor

3.5

Line:24  term : unary_expression

3.5

Line:24  simple_expression : term

3.5

Line:24  factor : CONST_INT

4

Line:24  unary_expression : factor

4

Line:24  term : unary_expression

4

Line:24  simple_expression : term

4

Line:24  rel_expression : simple_expression-RELOP-simple_expression

3.5<4

Line:24  logic_expression : rel_expression

3.5<4

Line:24  expression : logic_expression

3.5<4

Line:24  factor : LPAREN-expression-RPAREN

(3.5<4)

Line:24  unary_expression : factor

(3.5<4)

Line:24  term : term-MULOP-unary_expression

2%(3.5<4)

Line:24  simple_expression : term

2%(3.5<4)

Line:24  rel_expression : simple_expression

2%(3.5<4)

Line:24  logic_expression : rel_expression

2%(3.5<4)

Line:24  expression : variable-ASSIGNOP-logic_expression

j=2%(3.5<4)

Line:24  expression_statement : expression-SEMICOLON

j=2%(3.5<4);

Line:24  statement : expression_statement

j=2%(3.5<4);

Line:24  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(); j=2%(3.5<4);

Line:25  variable : ID

b

Line:25  factor : CONST_INT

8

Line:25  unary_expression : factor

8

Line:25  term : unary_expression

8

Line:25  simple_expression : term

8

Line:25  rel_expression : simple_expression

8

Line:25  logic_expression : rel_expression

8

Line:25  expression : variable-ASSIGNOP-logic_expression

b=8

Line:25  expression_statement : expression-SEMICOLON

b=8;

Line:25  statement : expression_statement

b=8;

Line:25  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4); b=8;

Line:26  variable : ID

a

Line:26  factor : CONST_INT

4

Line:26  unary_expression : factor

4

Line:26  term : unary_expression

4

Line:26  simple_expression : term

4

Line:26  rel_expression : simple_expression

4

Line:26  logic_expression : rel_expression

4

Line:26  expression : variable-ASSIGNOP-logic_expression

a=4

Line:26  expression_statement : expression-SEMICOLON

a=4;

Line:26  statement : expression_statement

a=4;

Line:26  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8; a=4;

Line:27  factor : CONST_INT

3

Line:27  unary_expression : factor

3

Line:27  term : unary_expression

3

Line:27  simple_expression : term

3

Line:27  rel_expression : simple_expression

3

Line:27  logic_expression : rel_expression

3

Line:27  expression : logic_expression

3

Line:27  variable : ID-LTHIRD-expression-RTHIRD

i[3]

Line:27  factor : CONST_INT

1

Line:27  unary_expression : factor

1

Line:27  term : unary_expression

1

Line:27  simple_expression : term

1

Line:27  rel_expression : simple_expression

1

Line:27  logic_expression : rel_expression

1

Line:27  expression : variable-ASSIGNOP-logic_expression

i[3]=1

Line:27  expression_statement : expression-SEMICOLON

i[3]=1;

Line:27  statement : expression_statement

i[3]=1;

Line:27  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4; i[3]=1;

Line:28  argument_list : %empty

Line:28  

Line:28  factor : ID-LPAREN-argument_list-RPAREN

func()

Line:28  unary_expression : factor

func()

Line:28  term : unary_expression

func()

Line:28  simple_expression : term

func()

Line:28  rel_expression : simple_expression

func()

Line:28  logic_expression : rel_expression

func()

Line:28  expression : logic_expression

func()

Line:28  expression_statement : expression-SEMICOLON

func();

Line:28  statement : expression_statement

func();

Line:28  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1; func();

Line:29  argument_list : %empty

Line:29  

Line:29  factor : ID-LPAREN-argument_list-RPAREN

i()

Line:29  unary_expression : factor

i()

Line:29  term : unary_expression

i()

Line:29  simple_expression : term

i()

Line:29  rel_expression : simple_expression

i()

Line:29  logic_expression : rel_expression

i()

Line:29  expression : logic_expression

i()

Line:29  expression_statement : expression-SEMICOLON

i();

Line:29  statement : expression_statement

i();

Line:29  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func(); i();

Line:30  variable : ID

c

Line:30  argument_list : %empty

Line:30  

Line:30  factor : ID-LPAREN-argument_list-RPAREN

g()

Line:30  unary_expression : factor

g()

Line:30  term : unary_expression

g()

Line:30  simple_expression : term

g()

Line:30  rel_expression : simple_expression

g()

Line:30  logic_expression : rel_expression

g()

Line:30  expression : variable-ASSIGNOP-logic_expression

c=g()

Line:30  expression_statement : expression-SEMICOLON

c=g();

Line:30  statement : expression_statement

c=g();

Line:30  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i(); c=g();

Line:31  type_specifier : FLOAT

float 

Line:31  declarationList : ID

d

Line:31  var_declaration : type_specifier-declarationList-SEMICOLON

float  d;

Line:31  statement : var_declaration

float  d;

Line:31  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
c=g(); float  d;

Line:32  variable : ID

d

Line:32  factor : CONST_INT

2

Line:32  unary_expression : factor

2

Line:32  term : unary_expression

2

Line:32  simple_expression : term

2

Line:32  rel_expression : simple_expression

2

Line:32  logic_expression : rel_expression

2

Line:32  expression : variable-ASSIGNOP-logic_expression

d=2

Line:32  expression_statement : expression-SEMICOLON

d=2;

Line:32  statement : expression_statement

d=2;

Line:32  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
c=g();
float  d; d=2;

Line:34  factor : CONST_INT

0

Line:34  unary_expression : factor

0

Line:34  term : unary_expression

0

Line:34  simple_expression : term

0

Line:34  rel_expression : simple_expression

0

Line:34  logic_expression : rel_expression

0

Line:34  expression : logic_expression

0

Line:34  statement : RETURN-expression-SEMICOLON

return 0

Line:34  statements : statements-statement

int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
c=g();
float  d;
d=2; return 0;

Line:35  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #1

  14:<ID,int array,a> - 

  16:<ID,int ,c> - 

  17:<ID,float ,d> - 

  22:<ID,int ,i> - 

  23:<ID,int ,j> - 





  SCOPE TABLE #0

  19:<ID,Function,f> - 

  20:<ID,Function,g> - 

  21:<ID,Function,h> - 

  48:<ID,Function,main> - 

  75:<ID,Function,func> - 




{int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
c=g();
float  d;
d=2;
return 0;}

Line:35  func_definition : type_specifier-ID-LPAREN-RPAREN-compound_statement

int  main(){
int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
c=g();
float  d;
d=2;
return 0;
} {
int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
c=g();
float  d;
d=2;
return 0;
}

Line:35  unit : func_definition

int  main(){
int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
c=g();
float  d;
d=2;
return 0;
}

Line:35  program : program-unit

int  func(int  a){
return a;
}
float  f(){
return 1.0;
}
void  g(){}
int  h(int  a);
 int  main(){
int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
c=g();
float  d;
d=2;
return 0;
}


Line:37  type_specifier : INT

int 

Line:37  type_specifier : FLOAT

float 

Line:37  parameter_list : type_specifier-ID

float  a

Line:38  factor : CONST_INT

0

Line:38  unary_expression : factor

0

Line:38  term : unary_expression

0

Line:38  simple_expression : term

0

Line:38  rel_expression : simple_expression

0

Line:38  logic_expression : rel_expression

0

Line:38  expression : logic_expression

0

Line:38  statement : RETURN-expression-SEMICOLON

return 0

Line:38  statements : statement

return 0;

Line:39  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #1

  14:<ID,float ,a> - 





  SCOPE TABLE #0

  19:<ID,Function,f> - 

  20:<ID,Function,g> - 

  21:<ID,Function,h> - 

  48:<ID,Function,main> - 

  75:<ID,Function,func> - 




{return 0;}

Line:39  func_definition : type_specifier-ID-LPAREN-parameter_list-RPAREN-compound_statement 

int  h(float  a) {
return 0;
}

Line:39  unit : func_definition

int  h(float  a){
return 0;
}

Line:39  program : program-unit

int  func(int  a){
return a;
}
float  f(){
return 1.0;
}
void  g(){}
int  h(int  a);
int  main(){
int  a[2],c,i,j;
float  c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
c=g();
float  d;
d=2;
return 0;
}
 int  h(float  a){
return 0;
}


Final SymbolTable : 


  SCOPE TABLE #0

  19:<ID,Function,f> - 

  20:<ID,Function,g> - 

  21:<ID,Function,h> - 

  48:<ID,Function,main> - 

  75:<ID,Function,func> - 




Total Lines :39

Total Errors :17



^^^^^^^^^^^Finished Parsing Test/input0.c^^^^^^^^^^^



