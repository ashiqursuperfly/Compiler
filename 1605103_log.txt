

^^^^^^^^^^^Parsing input.c^^^^^^^^^^^



Line:1  type_specifier : INT

int 

Line:1  type_specifier : INT

int 

Line:1  parameter_list : type_specifier-ID

int  a

Line:1  type_specifier : INT

int 

Line:1  parameter_list : parameter_list-COMMA-type_specifier-ID

int  a,int  b

Line:3  variable : ID

a

Line:3  factor : variable

a

Line:3  unary_expression : factor

a

Line:3  term : unary_expression

a

Line:3  simple_expression : term

a

Line:3  variable : ID

b

Line:3  factor : variable

b

Line:3  unary_expression : factor

b

Line:3  term : unary_expression

b

Line:3  simple_expression : term

b

Line:3  rel_expression : simple_expression-RELOP-simple_expression

a<b

Line:3  logic_expression : rel_expression

a<b

Line:3  expression : logic_expression

a<b

Line:3  variable : ID

b

Line:3  factor : variable

b

Line:3  unary_expression : factor

b

Line:3  term : unary_expression

b

Line:3  simple_expression : term

b

Line:3  rel_expression : simple_expression

b

Line:3  logic_expression : rel_expression

b

Line:3  expression : logic_expression

b

Line:3  statement : RETURN-expression-SEMICOLON

return b

Line:4  variable : ID

a

Line:4  factor : variable

a

Line:4  unary_expression : factor

a

Line:4  term : unary_expression

a

Line:4  simple_expression : term

a

Line:4  rel_expression : simple_expression

a

Line:4  logic_expression : rel_expression

a

Line:4  expression : logic_expression

a

Line:4  statement : RETURN-expression-SEMICOLON

return a

Line:4  statement : IF-LPAREN-expression-RPAREN-statement-ELSE-statement

if(a<b)
return b;else
return a;

Line:4  statements : statement

if(a<b)
return b; else 
return a;

Line:5  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #2

  14:<ID,int ,a> - 

  15:<ID,int ,b> - 





  SCOPE TABLE #1

  13:<ID,Function,max> - 




{if(a<b)
return b; else 
return a;}

Line:5  func_definition : type_specifier-ID-LPAREN-parameter_list-RPAREN-compound_statement 

int  max(int  a,int  b) {
if(a<b)
return b; else 
return a;
}

Line:5  unit : func_definition

int  max(int  a,int  b){
if(a<b)
return b; else 
return a;
} max(int  a,int  b){
if(a<b)
return b; else 
return a;
}

Line:5  program : unit

int  max(int  a,int  b){
if(a<b)
return b; else 
return a;
} max(int  a,int  b){
if(a<b)
return b; else 
return a;
}



Line:7  type_specifier : INT

int 

Line:9  type_specifier : INT

int 

Line:9  declarationList : ID

a

Line:9  declarationList : declarationList-COMMA-ID

a,b

Line:9  declarationList : declarationList-COMMA-ID

a,b,c

Line:9  declarationList : declarationList-COMMA-ID

a,b,c,d

Line:9  declarationList : declarationList-COMMA-ID

a,b,c,d,e

Line:9  declarationList : declarationList-COMMA-ID

a,b,c,d,e,f

Line:9  declarationList : declarationList-COMMA-ID

a,b,c,d,e,f,i

Line:9  var_declaration : type_specifier-declarationList-SEMICOLON

int  a,b,c,d,e,f,i;

Line:9  statement : var_declaration

int  a,b,c,d,e,f,i;

Line:9  statements : statement

int  a,b,c,d,e,f,i;

Line:10  variable : ID

a

Line:10  factor : CONST_INT

3

Line:10  unary_expression : factor

3

Line:10  term : unary_expression

3

Line:10  simple_expression : term

3

Line:10  factor : CONST_INT

2

Line:10  unary_expression : factor

2

Line:10  term : unary_expression

2

Line:10  simple_expression : simple_expression-ADDOP-term

3+2

Line:10  rel_expression : simple_expression

3+2

Line:10  logic_expression : rel_expression

3+2

Line:10  expression : variable-ASSIGNOP-logic_expression

a=3+2

Line:10  expression_statement : expression-SEMICOLON

a=3+2;

Line:10  statement : expression_statement

a=3+2;

Line:10  statements : statements-statement

int  a,b,c,d,e,f,i; a=3+2;

Line:11  statement : PRINTLN-LPAREN-ID-RPAREN-SEMICOLON


 (a)

Line:11  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2; 
(a)

Line:12  variable : ID

b

Line:12  factor : CONST_INT

2

Line:12  unary_expression : factor

2

Line:12  term : unary_expression

2

Line:12  simple_expression : term

2

Line:12  factor : CONST_INT

5

Line:12  unary_expression : factor

5

Line:12  term : unary_expression

5

Line:12  variable : ID

a

Line:12  factor : variable

a

Line:12  unary_expression : factor

a

Line:12  term : term-MULOP-unary_expression

5*a

Line:12  simple_expression : simple_expression-ADDOP-term

2-5*a

Line:12  factor : CONST_INT

7

Line:12  unary_expression : factor

7

Line:12  term : unary_expression

7

Line:12  factor : CONST_INT

3

Line:12  unary_expression : factor

3

Line:12  term : term-MULOP-unary_expression

7%3

Line:12  simple_expression : term

7%3

Line:12  rel_expression : simple_expression

7%3

Line:12  logic_expression : rel_expression

7%3

Line:12  expression : logic_expression

7%3

Line:12  factor : LPAREN-expression-RPAREN

(7%3)

Line:12  unary_expression : factor

(7%3)

Line:12  term : unary_expression

(7%3)

Line:12  simple_expression : simple_expression-ADDOP-term

2-5*a+(7%3)

Line:12  rel_expression : simple_expression

2-5*a+(7%3)

Line:12  logic_expression : rel_expression

2-5*a+(7%3)

Line:12  expression : variable-ASSIGNOP-logic_expression

b=2-5*a+(7%3)

Line:12  expression_statement : expression-SEMICOLON

b=2-5*a+(7%3);

Line:12  statement : expression_statement

b=2-5*a+(7%3);

Line:12  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a) b=2-5*a+(7%3);

Line:13  statement : PRINTLN-LPAREN-ID-RPAREN-SEMICOLON


 (b)

Line:13  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3); 
(b)

Line:15  variable : ID

c

Line:15  factor : variable INCOP

c++

Line:15  unary_expression : factor

c++

Line:15  term : unary_expression

c++

Line:15  simple_expression : term

c++

Line:15  rel_expression : simple_expression

c++

Line:15  logic_expression : rel_expression

c++

Line:15  expression : logic_expression

c++

Line:15  expression_statement : expression-SEMICOLON

c++;

Line:15  statement : expression_statement

c++;

Line:15  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b) c++;

Line:16  statement : PRINTLN-LPAREN-ID-RPAREN-SEMICOLON


 (c)

Line:16  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++; 
(c)

Line:17  variable : ID

b

Line:17  factor : variable DECOP

b--

Line:17  unary_expression : factor

b--

Line:17  term : unary_expression

b--

Line:17  simple_expression : term

b--

Line:17  rel_expression : simple_expression

b--

Line:17  logic_expression : rel_expression

b--

Line:17  expression : logic_expression

b--

Line:17  expression_statement : expression-SEMICOLON

b--;

Line:17  statement : expression_statement

b--;

Line:17  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c) b--;

Line:18  statement : PRINTLN-LPAREN-ID-RPAREN-SEMICOLON


 (b)

Line:18  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--; 
(b)

Line:20  variable : ID

b

Line:20  factor : variable

b

Line:20  unary_expression : factor

b

Line:20  term : unary_expression

b

Line:20  simple_expression : term

b

Line:20  variable : ID

a

Line:20  factor : variable

a

Line:20  unary_expression : factor

a

Line:20  term : unary_expression

a

Line:20  simple_expression : term

a

Line:20  rel_expression : simple_expression-RELOP-simple_expression

b>a

Line:20  logic_expression : rel_expression

b>a

Line:20  expression : logic_expression

b>a

Line:20  factor : LPAREN-expression-RPAREN

(b>a)

Line:20  unary_expression : factor

(b>a)

Line:20  term : unary_expression

(b>a)

Line:20  simple_expression : term

(b>a)

Line:20  rel_expression : simple_expression

(b>a)

Line:20  variable : ID

c

Line:20  factor : variable

c

Line:20  unary_expression : factor

c

Line:20  term : unary_expression

c

Line:20  simple_expression : term

c

Line:20  variable : ID

b

Line:20  factor : variable

b

Line:20  unary_expression : factor

b

Line:20  term : unary_expression

b

Line:20  simple_expression : term

b

Line:20  rel_expression : simple_expression-RELOP-simple_expression

c>b

Line:20  logic_expression : rel_expression

c>b

Line:20  expression : logic_expression

c>b

Line:20  factor : LPAREN-expression-RPAREN

(c>b)

Line:20  unary_expression : factor

(c>b)

Line:20  term : unary_expression

(c>b)

Line:20  simple_expression : term

(c>b)

Line:20  rel_expression : simple_expression

(c>b)

Line:20  logic_expression : rel_expression-LOGICOP-rel_expression

(b>a)||(c>b)

Line:20  expression : logic_expression

(b>a)||(c>b)

Line:22  variable : ID

e

Line:22  factor : CONST_INT

1

Line:22  unary_expression : factor

1

Line:22  term : unary_expression

1

Line:22  simple_expression : term

1

Line:22  factor : CONST_INT

2

Line:22  unary_expression : factor

2

Line:22  term : unary_expression

2

Line:22  simple_expression : term

2

Line:22  rel_expression : simple_expression

2

Line:22  factor : CONST_INT

5

Line:22  unary_expression : factor

5

Line:22  term : unary_expression

5

Line:22  simple_expression : term

5

Line:22  rel_expression : simple_expression

5

Line:22  logic_expression : rel_expression-LOGICOP-rel_expression

2&&5

Line:22  expression : logic_expression

2&&5

Line:22  factor : LPAREN-expression-RPAREN

(2&&5)

Line:22  unary_expression : factor

(2&&5)

Line:22  term : unary_expression

(2&&5)

Line:22  simple_expression : simple_expression-ADDOP-term

1+(2&&5)

Line:22  rel_expression : simple_expression

1+(2&&5)

Line:22  logic_expression : rel_expression

1+(2&&5)

Line:22  expression : variable-ASSIGNOP-logic_expression

e=1+(2&&5)

Line:22  expression_statement : expression-SEMICOLON

e=1+(2&&5);

Line:22  statement : expression_statement

e=1+(2&&5);

Line:22  statements : statement

e=1+(2&&5);

Line:23  statement : PRINTLN-LPAREN-ID-RPAREN-SEMICOLON


 (e)

Line:23  statements : statements-statement

e=1+(2&&5); 
(e)

Line:24  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #4





  SCOPE TABLE #3

  14:<ID,int ,a> - 

  15:<ID,int ,b> - 

  16:<ID,int ,c> - 

  17:<ID,int ,d> - 

  18:<ID,int ,e> - 

  19:<ID,int ,f> - 

  22:<ID,int ,i> - 





  SCOPE TABLE #1

  13:<ID,Function,max> - 

  48:<ID,Function,main> - 




{e=1+(2&&5);

(e)}

Line:24  statement : compound_statement

{
e=1+(2&&5);

(e)
}

Line:25  statement : IF-LPAREN-expression-RPAREN-statement

if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}

Line:25  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b) if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}

Line:25  variable : ID

f

Line:25  factor : CONST_INT

0

Line:25  unary_expression : factor

0

Line:25  term : unary_expression

0

Line:25  simple_expression : term

0

Line:25  rel_expression : simple_expression

0

Line:25  logic_expression : rel_expression

0

Line:25  expression : variable-ASSIGNOP-logic_expression

f=0

Line:25  expression_statement : expression-SEMICOLON

f=0;

Line:25  statement : expression_statement

f=0;

Line:25  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
} f=0;

Line:26  variable : ID

i

Line:26  factor : CONST_INT

100

Line:26  unary_expression : factor

100

Line:26  term : unary_expression

100

Line:26  simple_expression : term

100

Line:26  rel_expression : simple_expression

100

Line:26  logic_expression : rel_expression

100

Line:26  expression : variable-ASSIGNOP-logic_expression

i=100

Line:26  expression_statement : expression-SEMICOLON

i=100;

Line:26  variable : ID

i

Line:26  factor : variable

i

Line:26  unary_expression : factor

i

Line:26  term : unary_expression

i

Line:26  simple_expression : term

i

Line:26  factor : CONST_INT

1

Line:26  unary_expression : factor

1

Line:26  term : unary_expression

1

Line:26  simple_expression : term

1

Line:26  rel_expression : simple_expression-RELOP-simple_expression

i>=1

Line:26  logic_expression : rel_expression

i>=1

Line:26  expression : logic_expression

i>=1

Line:26  expression_statement : expression-SEMICOLON

i>=1;

Line:26  variable : ID

i

Line:26  factor : variable DECOP

i--

Line:26  unary_expression : factor

i--

Line:26  term : unary_expression

i--

Line:26  simple_expression : term

i--

Line:26  rel_expression : simple_expression

i--

Line:26  logic_expression : rel_expression

i--

Line:26  expression : logic_expression

i--

Line:28  variable : ID

f

Line:28  factor : variable INCOP

f++

Line:28  unary_expression : factor

f++

Line:28  term : unary_expression

f++

Line:28  simple_expression : term

f++

Line:28  rel_expression : simple_expression

f++

Line:28  logic_expression : rel_expression

f++

Line:28  expression : logic_expression

f++

Line:28  expression_statement : expression-SEMICOLON

f++;

Line:28  statement : expression_statement

f++;

Line:28  statements : statement

f++;

Line:29  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #5





  SCOPE TABLE #3

  14:<ID,int ,a> - 

  15:<ID,int ,b> - 

  16:<ID,int ,c> - 

  17:<ID,int ,d> - 

  18:<ID,int ,e> - 

  19:<ID,int ,f> - 

  22:<ID,int ,i> - 





  SCOPE TABLE #1

  13:<ID,Function,max> - 

  48:<ID,Function,main> - 




{f++;}

Line:29  statement : compound_statement

{
f++;
}

Line:29  statement : FOR-LPAREN-expression_statement-expression_statement-expression-RPAREN-statement

for(i=100; i>=1; i--)
{
f++;
}

Line:29  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0; for(i=100;i>=1;i--)
i--

Line:30  statement : PRINTLN-LPAREN-ID-RPAREN-SEMICOLON


 (f)

Line:30  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i-- 
(f)

Line:32  variable : ID

f

Line:32  factor : CONST_INT

0

Line:32  unary_expression : factor

0

Line:32  term : unary_expression

0

Line:32  simple_expression : term

0

Line:32  rel_expression : simple_expression

0

Line:32  logic_expression : rel_expression

0

Line:32  expression : variable-ASSIGNOP-logic_expression

f=0

Line:32  expression_statement : expression-SEMICOLON

f=0;

Line:32  statement : expression_statement

f=0;

Line:32  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f) f=0;

Line:33  variable : ID

i

Line:33  factor : variable

i

Line:33  unary_expression : factor

i

Line:33  term : unary_expression

i

Line:33  simple_expression : term

i

Line:33  factor : CONST_INT

40

Line:33  unary_expression : factor

40

Line:33  term : unary_expression

40

Line:33  simple_expression : term

40

Line:33  rel_expression : simple_expression-RELOP-simple_expression

i>40

Line:33  logic_expression : rel_expression

i>40

Line:33  expression : logic_expression

i>40

Line:35  variable : ID

f

Line:35  factor : variable DECOP

f--

Line:35  unary_expression : factor

f--

Line:35  term : unary_expression

f--

Line:35  simple_expression : term

f--

Line:35  rel_expression : simple_expression

f--

Line:35  logic_expression : rel_expression

f--

Line:35  expression : logic_expression

f--

Line:35  expression_statement : expression-SEMICOLON

f--;

Line:35  statement : expression_statement

f--;

Line:35  statements : statement

f--;

Line:36  variable : ID

i

Line:36  factor : variable DECOP

i--

Line:36  unary_expression : factor

i--

Line:36  term : unary_expression

i--

Line:36  simple_expression : term

i--

Line:36  rel_expression : simple_expression

i--

Line:36  logic_expression : rel_expression

i--

Line:36  expression : logic_expression

i--

Line:36  expression_statement : expression-SEMICOLON

i--;

Line:36  statement : expression_statement

i--;

Line:36  statements : statements-statement

f--; i--;

Line:37  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #6





  SCOPE TABLE #3

  14:<ID,int ,a> - 

  15:<ID,int ,b> - 

  16:<ID,int ,c> - 

  17:<ID,int ,d> - 

  18:<ID,int ,e> - 

  19:<ID,int ,f> - 

  22:<ID,int ,i> - 





  SCOPE TABLE #1

  13:<ID,Function,max> - 

  48:<ID,Function,main> - 




{f--;
i--;}

Line:37  statement : compound_statement

{
f--;
i--;
}

Line:37  statement : WHILE-LPAREN-expression-RPAREN-statement

while(i>40)
{
f--;
i--;
}

Line:37  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0; while(i>40)
{
f--;
i--;
}

Line:38  statement : PRINTLN-LPAREN-ID-RPAREN-SEMICOLON


 (f)

Line:38  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
} 
(f)

Line:40  variable : ID

f

Line:40  factor : CONST_INT

10

Line:40  unary_expression : factor

10

Line:40  term : unary_expression

10

Line:40  simple_expression : term

10

Line:40  rel_expression : simple_expression

10

Line:40  logic_expression : rel_expression

10

Line:40  arguments : logic_expression

10

Line:40  factor : CONST_INT

4

Line:40  unary_expression : factor

4

Line:40  term : unary_expression

4

Line:40  simple_expression : term

4

Line:40  rel_expression : simple_expression

4

Line:40  logic_expression : rel_expression

4

Line:40  arguments : arguments-COMMA-logic_expression 

10,4

Line:40  argument_list : arguments

10,4

Line:40  factor : ID-LPAREN-argument_list-RPAREN

max(10,4)

Line:40  unary_expression : factor

max(10,4)

Line:40  term : unary_expression

max(10,4)

Line:40  simple_expression : term

max(10,4)

Line:40  rel_expression : simple_expression

max(10,4)

Line:40  logic_expression : rel_expression

max(10,4)

Line:40  expression : variable-ASSIGNOP-logic_expression

f=max(10,4)

Line:40  expression_statement : expression-SEMICOLON

f=max(10,4);

Line:40  statement : expression_statement

f=max(10,4);

Line:40  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
}

(f) f=max(10,4);

Line:41  statement : PRINTLN-LPAREN-ID-RPAREN-SEMICOLON


 (f)

Line:41  statements : statements-statement

int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
}

(f)
f=max(10,4); 
(f)

Line:42  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #3

  14:<ID,int ,a> - 

  15:<ID,int ,b> - 

  16:<ID,int ,c> - 

  17:<ID,int ,d> - 

  18:<ID,int ,e> - 

  19:<ID,int ,f> - 

  22:<ID,int ,i> - 





  SCOPE TABLE #1

  13:<ID,Function,max> - 

  48:<ID,Function,main> - 




{int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
}

(f)
f=max(10,4);

(f)}

Line:42  func_definition : type_specifier-ID-LPAREN-RPAREN-compound_statement

int  main(){
int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
}

(f)
f=max(10,4);

(f)
} {
int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
}

(f)
f=max(10,4);

(f)
}

Line:42  unit : func_definition

int  main(){
int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
}

(f)
f=max(10,4);

(f)
}{
int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
}

(f)
f=max(10,4);

(f)
}

Line:42  program : program-unit

int  max(int  a,int  b){
if(a<b)
return b; else 
return a;
} max(int  a,int  b){
if(a<b)
return b; else 
return a;
}
 int  main(){
int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
}

(f)
f=max(10,4);

(f)
}{
int  a,b,c,d,e,f,i;
a=3+2;

(a)
b=2-5*a+(7%3);

(b)
c++;

(c)
b--;

(b)
if((b>a)||(c>b))
{
e=1+(2&&5);

(e)
}
f=0;
for(i=100;i>=1;i--)
i--

(f)
f=0;
while(i>40)
{
f--;
i--;
}

(f)
f=max(10,4);

(f)
}


Final SymbolTable : 


  SCOPE TABLE #1

  13:<ID,Function,max> - 

  48:<ID,Function,main> - 




Total Lines :43

Total Errors :0



^^^^^^^^^^^Finished Parsing input.c^^^^^^^^^^^



