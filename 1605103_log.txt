

^^^^^^^^^^^Parsing Test/input1.c^^^^^^^^^^^



Line:1  type_specifier : INT

int 

Line:1  type_specifier : INT

int 

Line:1  parameter_list : type_specifier-ID

int  a

Line:1  type_specifier : INT

int 

Line:1  parameter_list : parameter_list-COMMA-type_specifier-ID

int  a,int  b

Line:2  variable : ID

a

Line:2  factor : variable

a

Line:2  unary_expression : factor

a

Line:2  term : unary_expression

a

Line:2  simple_expression : term

a

Line:2  variable : ID

b

Line:2  factor : variable

b

Line:2  unary_expression : factor

b

Line:2  term : unary_expression

b

Line:2  simple_expression : simple_expression-ADDOP-term

a+b

Line:2  rel_expression : simple_expression

a+b

Line:2  logic_expression : rel_expression

a+b

Line:2  expression : logic_expression

a+b

Line:2  statement : RETURN-expression-SEMICOLON

return a+b

Line:2  statements : statement

return a+b;

Line:3  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #2

  14:<ID,int ,a> - 

  15:<ID,int ,b> - 





  SCOPE TABLE #1

  56:<ID,Function,var> - 




{return a+b;}

Line:3  func_definition : type_specifier-ID-LPAREN-parameter_list-RPAREN-compound_statement 

int  var(int  a,int  b) {
return a+b;
}

Line:3  unit : func_definition

int  var(int  a,int  b){
return a+b;
} var(int  a,int  b){
return a+b;
}

Line:3  program : unit

int  var(int  a,int  b){
return a+b;
} var(int  a,int  b){
return a+b;
}



Line:21  type_specifier : INT

int 

Line:23  type_specifier : INT

int 

Line:23  declarationList : ID

x

Line:23  var_declaration : type_specifier-declarationList-SEMICOLON

int  x;

Line:23  statement : var_declaration

int  x;

Line:23  statements : statement

int  x;

Line:23  type_specifier : INT

int 

Line:23  declarationList : ID

d

Line:23  var_declaration : type_specifier-declarationList-SEMICOLON

int  d;

Line:23  statement : var_declaration

int  d;

Line:23  statements : statements-statement

int  x; int  d;

Line:24  variable : ID

x

Line:24  factor : CONST_INT

3

Line:24  unary_expression : factor

3

Line:24  term : unary_expression

3

Line:24  simple_expression : term

3

Line:24  rel_expression : simple_expression

3

Line:24  logic_expression : rel_expression

3

Line:24  expression : variable-ASSIGNOP-logic_expression

x=3

Line:24  expression_statement : expression-SEMICOLON

x=3;

Line:24  statement : expression_statement

x=3;

Line:24  statements : statements-statement

int  x;
int  d; x=3;

Line:25  type_specifier : INT

int 

Line:25  declarationList : ID-LTHIRD-CONST_INT-RTHIRD

a[2]

Line:25  declarationList : declarationList-COMMA-ID

a[2],c

Line:25  declarationList : declarationList-COMMA-ID

a[2],c,i

Line:25  declarationList : declarationList-COMMA-ID

a[2],c,i,j

Line:25  var_declaration : type_specifier-declarationList-SEMICOLON

int  a[2],c,i,j;

Line:25  statement : var_declaration

int  a[2],c,i,j;

Line:25  statements : statements-statement

int  x;
int  d;
x=3; int  a[2],c,i,j;

Line:27  variable : ID

x

Line:27  factor : CONST_INT

1

Line:27  unary_expression : factor

1

Line:27  term : unary_expression

1

Line:27  simple_expression : term

1

Line:27  rel_expression : simple_expression

1

Line:27  logic_expression : rel_expression

1

Line:27  arguments : logic_expression

1

Line:27  variable : ID

x

Line:27  factor : variable

x

Line:27  unary_expression : factor

x

Line:27  term : unary_expression

x

Line:27  simple_expression : term

x

Line:27  rel_expression : simple_expression

x

Line:27  logic_expression : rel_expression

x

Line:27  arguments : arguments-COMMA-logic_expression 

1,x

Line:27  argument_list : arguments

1,x

Line:27  factor : ID-LPAREN-argument_list-RPAREN

var(1,x)

Line:27  unary_expression : factor

var(1,x)

Line:27  term : unary_expression

var(1,x)

Line:27  simple_expression : term

var(1,x)

Line:27  rel_expression : simple_expression

var(1,x)

Line:27  logic_expression : rel_expression

var(1,x)

Line:27  expression : variable-ASSIGNOP-logic_expression

x=var(1,x)

Line:27  expression_statement : expression-SEMICOLON

x=var(1,x);

Line:27  statement : expression_statement

x=var(1,x);

Line:27  statements : statements-statement

int  x;
int  d;
x=3;
int  a[2],c,i,j; x=var(1,x);

Line:30  factor : CONST_INT

0

Line:30  unary_expression : factor

0

Line:30  term : unary_expression

0

Line:30  simple_expression : term

0

Line:30  rel_expression : simple_expression

0

Line:30  logic_expression : rel_expression

0

Line:30  expression : logic_expression

0

Line:30  statement : RETURN-expression-SEMICOLON

return 0

Line:30  statements : statements-statement

int  x;
int  d;
x=3;
int  a[2],c,i,j;
x=var(1,x); return 0;

Line:31  compound_statement : LCURL-statements-RCURL


  SCOPE TABLE #3

  14:<ID,int array,a> - 

  16:<ID,int ,c> - 

  17:<ID,int ,d> - 

  22:<ID,int ,i> - 

  23:<ID,int ,j> - 

  37:<ID,int ,x> - 





  SCOPE TABLE #1

  48:<ID,Function,main> - 

  56:<ID,Function,var> - 




{int  x;
int  d;
x=3;
int  a[2],c,i,j;
x=var(1,x);
return 0;}

Line:31  func_definition : type_specifier-ID-LPAREN-RPAREN-compound_statement

int  main(){
int  x;
int  d;
x=3;
int  a[2],c,i,j;
x=var(1,x);
return 0;
} {
int  x;
int  d;
x=3;
int  a[2],c,i,j;
x=var(1,x);
return 0;
}

Line:31  unit : func_definition

int  main(){
int  x;
int  d;
x=3;
int  a[2],c,i,j;
x=var(1,x);
return 0;
}{
int  x;
int  d;
x=3;
int  a[2],c,i,j;
x=var(1,x);
return 0;
}

Line:31  program : program-unit

int  var(int  a,int  b){
return a+b;
} var(int  a,int  b){
return a+b;
}
 int  main(){
int  x;
int  d;
x=3;
int  a[2],c,i,j;
x=var(1,x);
return 0;
}{
int  x;
int  d;
x=3;
int  a[2],c,i,j;
x=var(1,x);
return 0;
}


Final SymbolTable : 


  SCOPE TABLE #1

  48:<ID,Function,main> - 

  56:<ID,Function,var> - 




Total Lines :31

Total Errors :0



^^^^^^^^^^^Finished Parsing Test/input1.c^^^^^^^^^^^



